// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFoos(t *testing.T) {
	t.Parallel()

	query := Foos()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFoosDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Foo{}
	if err = randomize.Struct(seed, o, fooDBTypes, true, fooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Foos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFoosQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Foo{}
	if err = randomize.Struct(seed, o, fooDBTypes, true, fooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Foos().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Foos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFoosSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Foo{}
	if err = randomize.Struct(seed, o, fooDBTypes, true, fooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FooSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Foos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFoosExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Foo{}
	if err = randomize.Struct(seed, o, fooDBTypes, true, fooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FooExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Foo exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FooExists to return true, but got false.")
	}
}

func testFoosFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Foo{}
	if err = randomize.Struct(seed, o, fooDBTypes, true, fooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	fooFound, err := FindFoo(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if fooFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFoosBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Foo{}
	if err = randomize.Struct(seed, o, fooDBTypes, true, fooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Foos().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFoosOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Foo{}
	if err = randomize.Struct(seed, o, fooDBTypes, true, fooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Foos().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFoosAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fooOne := &Foo{}
	fooTwo := &Foo{}
	if err = randomize.Struct(seed, fooOne, fooDBTypes, false, fooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}
	if err = randomize.Struct(seed, fooTwo, fooDBTypes, false, fooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fooOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fooTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Foos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFoosCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	fooOne := &Foo{}
	fooTwo := &Foo{}
	if err = randomize.Struct(seed, fooOne, fooDBTypes, false, fooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}
	if err = randomize.Struct(seed, fooTwo, fooDBTypes, false, fooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fooOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fooTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Foos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func fooBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Foo) error {
	*o = Foo{}
	return nil
}

func fooAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Foo) error {
	*o = Foo{}
	return nil
}

func fooAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Foo) error {
	*o = Foo{}
	return nil
}

func fooBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Foo) error {
	*o = Foo{}
	return nil
}

func fooAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Foo) error {
	*o = Foo{}
	return nil
}

func fooBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Foo) error {
	*o = Foo{}
	return nil
}

func fooAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Foo) error {
	*o = Foo{}
	return nil
}

func fooBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Foo) error {
	*o = Foo{}
	return nil
}

func fooAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Foo) error {
	*o = Foo{}
	return nil
}

func testFoosHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Foo{}
	o := &Foo{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, fooDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Foo object: %s", err)
	}

	AddFooHook(boil.BeforeInsertHook, fooBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	fooBeforeInsertHooks = []FooHook{}

	AddFooHook(boil.AfterInsertHook, fooAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	fooAfterInsertHooks = []FooHook{}

	AddFooHook(boil.AfterSelectHook, fooAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	fooAfterSelectHooks = []FooHook{}

	AddFooHook(boil.BeforeUpdateHook, fooBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	fooBeforeUpdateHooks = []FooHook{}

	AddFooHook(boil.AfterUpdateHook, fooAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	fooAfterUpdateHooks = []FooHook{}

	AddFooHook(boil.BeforeDeleteHook, fooBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	fooBeforeDeleteHooks = []FooHook{}

	AddFooHook(boil.AfterDeleteHook, fooAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	fooAfterDeleteHooks = []FooHook{}

	AddFooHook(boil.BeforeUpsertHook, fooBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	fooBeforeUpsertHooks = []FooHook{}

	AddFooHook(boil.AfterUpsertHook, fooAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	fooAfterUpsertHooks = []FooHook{}
}

func testFoosInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Foo{}
	if err = randomize.Struct(seed, o, fooDBTypes, true, fooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Foos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFoosInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Foo{}
	if err = randomize.Struct(seed, o, fooDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(fooColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Foos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFoosReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Foo{}
	if err = randomize.Struct(seed, o, fooDBTypes, true, fooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFoosReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Foo{}
	if err = randomize.Struct(seed, o, fooDBTypes, true, fooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FooSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFoosSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Foo{}
	if err = randomize.Struct(seed, o, fooDBTypes, true, fooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Foos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	fooDBTypes = map[string]string{`ID`: `text`, `CreatedAt`: `timestamp with time zone`, `Name`: `text`}
	_          = bytes.MinRead
)

func testFoosUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(fooPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(fooAllColumns) == len(fooPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Foo{}
	if err = randomize.Struct(seed, o, fooDBTypes, true, fooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Foos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fooDBTypes, true, fooPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFoosSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(fooAllColumns) == len(fooPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Foo{}
	if err = randomize.Struct(seed, o, fooDBTypes, true, fooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Foos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fooDBTypes, true, fooPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(fooAllColumns, fooPrimaryKeyColumns) {
		fields = fooAllColumns
	} else {
		fields = strmangle.SetComplement(
			fooAllColumns,
			fooPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FooSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFoosUpsert(t *testing.T) {
	t.Parallel()

	if len(fooAllColumns) == len(fooPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Foo{}
	if err = randomize.Struct(seed, &o, fooDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Foo: %s", err)
	}

	count, err := Foos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, fooDBTypes, false, fooPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Foo struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Foo: %s", err)
	}

	count, err = Foos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
