// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GeographyColumn is an object representing the database table.
type GeographyColumn struct {
	FTableCatalog    null.String `boil:"f_table_catalog" json:"f_table_catalog,omitempty" toml:"f_table_catalog" yaml:"f_table_catalog,omitempty"`
	FTableSchema     null.String `boil:"f_table_schema" json:"f_table_schema,omitempty" toml:"f_table_schema" yaml:"f_table_schema,omitempty"`
	FTableName       null.String `boil:"f_table_name" json:"f_table_name,omitempty" toml:"f_table_name" yaml:"f_table_name,omitempty"`
	FGeographyColumn null.String `boil:"f_geography_column" json:"f_geography_column,omitempty" toml:"f_geography_column" yaml:"f_geography_column,omitempty"`
	CoordDimension   null.Int    `boil:"coord_dimension" json:"coord_dimension,omitempty" toml:"coord_dimension" yaml:"coord_dimension,omitempty"`
	Srid             null.Int    `boil:"srid" json:"srid,omitempty" toml:"srid" yaml:"srid,omitempty"`
	Type             null.String `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
}

var GeographyColumnColumns = struct {
	FTableCatalog    string
	FTableSchema     string
	FTableName       string
	FGeographyColumn string
	CoordDimension   string
	Srid             string
	Type             string
}{
	FTableCatalog:    "f_table_catalog",
	FTableSchema:     "f_table_schema",
	FTableName:       "f_table_name",
	FGeographyColumn: "f_geography_column",
	CoordDimension:   "coord_dimension",
	Srid:             "srid",
	Type:             "type",
}

var GeographyColumnTableColumns = struct {
	FTableCatalog    string
	FTableSchema     string
	FTableName       string
	FGeographyColumn string
	CoordDimension   string
	Srid             string
	Type             string
}{
	FTableCatalog:    "geography_columns.f_table_catalog",
	FTableSchema:     "geography_columns.f_table_schema",
	FTableName:       "geography_columns.f_table_name",
	FGeographyColumn: "geography_columns.f_geography_column",
	CoordDimension:   "geography_columns.coord_dimension",
	Srid:             "geography_columns.srid",
	Type:             "geography_columns.type",
}

// Generated where

var GeographyColumnWhere = struct {
	FTableCatalog    whereHelpernull_String
	FTableSchema     whereHelpernull_String
	FTableName       whereHelpernull_String
	FGeographyColumn whereHelpernull_String
	CoordDimension   whereHelpernull_Int
	Srid             whereHelpernull_Int
	Type             whereHelpernull_String
}{
	FTableCatalog:    whereHelpernull_String{field: "\"geography_columns\".\"f_table_catalog\""},
	FTableSchema:     whereHelpernull_String{field: "\"geography_columns\".\"f_table_schema\""},
	FTableName:       whereHelpernull_String{field: "\"geography_columns\".\"f_table_name\""},
	FGeographyColumn: whereHelpernull_String{field: "\"geography_columns\".\"f_geography_column\""},
	CoordDimension:   whereHelpernull_Int{field: "\"geography_columns\".\"coord_dimension\""},
	Srid:             whereHelpernull_Int{field: "\"geography_columns\".\"srid\""},
	Type:             whereHelpernull_String{field: "\"geography_columns\".\"type\""},
}

var (
	geographyColumnAllColumns            = []string{"f_table_catalog", "f_table_schema", "f_table_name", "f_geography_column", "coord_dimension", "srid", "type"}
	geographyColumnColumnsWithoutDefault = []string{}
	geographyColumnColumnsWithDefault    = []string{"f_table_catalog", "f_table_schema", "f_table_name", "f_geography_column", "coord_dimension", "srid", "type"}
	geographyColumnPrimaryKeyColumns     = []string{}
	geographyColumnGeneratedColumns      = []string{}
)

type (
	// GeographyColumnSlice is an alias for a slice of pointers to GeographyColumn.
	// This should almost always be used instead of []GeographyColumn.
	GeographyColumnSlice []*GeographyColumn
	// GeographyColumnHook is the signature for custom GeographyColumn hook methods
	GeographyColumnHook func(context.Context, boil.ContextExecutor, *GeographyColumn) error

	geographyColumnQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	geographyColumnType           = reflect.TypeOf(&GeographyColumn{})
	geographyColumnMapping        = queries.MakeStructMapping(geographyColumnType)
	geographyColumnInsertCacheMut sync.RWMutex
	geographyColumnInsertCache    = make(map[string]insertCache)
	geographyColumnUpdateCacheMut sync.RWMutex
	geographyColumnUpdateCache    = make(map[string]updateCache)
	geographyColumnUpsertCacheMut sync.RWMutex
	geographyColumnUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var geographyColumnAfterSelectHooks []GeographyColumnHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GeographyColumn) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range geographyColumnAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGeographyColumnHook registers your hook function for all future operations.
func AddGeographyColumnHook(hookPoint boil.HookPoint, geographyColumnHook GeographyColumnHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		geographyColumnAfterSelectHooks = append(geographyColumnAfterSelectHooks, geographyColumnHook)
	}
}

// One returns a single geographyColumn record from the query.
func (q geographyColumnQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GeographyColumn, error) {
	o := &GeographyColumn{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for geography_columns")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GeographyColumn records from the query.
func (q geographyColumnQuery) All(ctx context.Context, exec boil.ContextExecutor) (GeographyColumnSlice, error) {
	var o []*GeographyColumn

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GeographyColumn slice")
	}

	if len(geographyColumnAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GeographyColumn records in the query.
func (q geographyColumnQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count geography_columns rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q geographyColumnQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if geography_columns exists")
	}

	return count > 0, nil
}

// GeographyColumns retrieves all the records using an executor.
func GeographyColumns(mods ...qm.QueryMod) geographyColumnQuery {
	mods = append(mods, qm.From("\"geography_columns\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"geography_columns\".*"})
	}

	return geographyColumnQuery{q}
}
