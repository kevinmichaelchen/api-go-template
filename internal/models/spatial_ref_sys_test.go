// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSpatialRefSys(t *testing.T) {
	t.Parallel()

	query := SpatialRefSys()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSpatialRefSysDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpatialRefSy{}
	if err = randomize.Struct(seed, o, spatialRefSyDBTypes, true, spatialRefSyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SpatialRefSys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSpatialRefSysQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpatialRefSy{}
	if err = randomize.Struct(seed, o, spatialRefSyDBTypes, true, spatialRefSyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SpatialRefSys().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SpatialRefSys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSpatialRefSysSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpatialRefSy{}
	if err = randomize.Struct(seed, o, spatialRefSyDBTypes, true, spatialRefSyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SpatialRefSySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SpatialRefSys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSpatialRefSysExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpatialRefSy{}
	if err = randomize.Struct(seed, o, spatialRefSyDBTypes, true, spatialRefSyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SpatialRefSyExists(ctx, tx, o.Srid)
	if err != nil {
		t.Errorf("Unable to check if SpatialRefSy exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SpatialRefSyExists to return true, but got false.")
	}
}

func testSpatialRefSysFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpatialRefSy{}
	if err = randomize.Struct(seed, o, spatialRefSyDBTypes, true, spatialRefSyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	spatialRefSyFound, err := FindSpatialRefSy(ctx, tx, o.Srid)
	if err != nil {
		t.Error(err)
	}

	if spatialRefSyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSpatialRefSysBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpatialRefSy{}
	if err = randomize.Struct(seed, o, spatialRefSyDBTypes, true, spatialRefSyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SpatialRefSys().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSpatialRefSysOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpatialRefSy{}
	if err = randomize.Struct(seed, o, spatialRefSyDBTypes, true, spatialRefSyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SpatialRefSys().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSpatialRefSysAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	spatialRefSyOne := &SpatialRefSy{}
	spatialRefSyTwo := &SpatialRefSy{}
	if err = randomize.Struct(seed, spatialRefSyOne, spatialRefSyDBTypes, false, spatialRefSyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}
	if err = randomize.Struct(seed, spatialRefSyTwo, spatialRefSyDBTypes, false, spatialRefSyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = spatialRefSyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = spatialRefSyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SpatialRefSys().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSpatialRefSysCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	spatialRefSyOne := &SpatialRefSy{}
	spatialRefSyTwo := &SpatialRefSy{}
	if err = randomize.Struct(seed, spatialRefSyOne, spatialRefSyDBTypes, false, spatialRefSyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}
	if err = randomize.Struct(seed, spatialRefSyTwo, spatialRefSyDBTypes, false, spatialRefSyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = spatialRefSyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = spatialRefSyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SpatialRefSys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func spatialRefSyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SpatialRefSy) error {
	*o = SpatialRefSy{}
	return nil
}

func spatialRefSyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SpatialRefSy) error {
	*o = SpatialRefSy{}
	return nil
}

func spatialRefSyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SpatialRefSy) error {
	*o = SpatialRefSy{}
	return nil
}

func spatialRefSyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SpatialRefSy) error {
	*o = SpatialRefSy{}
	return nil
}

func spatialRefSyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SpatialRefSy) error {
	*o = SpatialRefSy{}
	return nil
}

func spatialRefSyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SpatialRefSy) error {
	*o = SpatialRefSy{}
	return nil
}

func spatialRefSyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SpatialRefSy) error {
	*o = SpatialRefSy{}
	return nil
}

func spatialRefSyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SpatialRefSy) error {
	*o = SpatialRefSy{}
	return nil
}

func spatialRefSyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SpatialRefSy) error {
	*o = SpatialRefSy{}
	return nil
}

func testSpatialRefSysHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SpatialRefSy{}
	o := &SpatialRefSy{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, spatialRefSyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy object: %s", err)
	}

	AddSpatialRefSyHook(boil.BeforeInsertHook, spatialRefSyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	spatialRefSyBeforeInsertHooks = []SpatialRefSyHook{}

	AddSpatialRefSyHook(boil.AfterInsertHook, spatialRefSyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	spatialRefSyAfterInsertHooks = []SpatialRefSyHook{}

	AddSpatialRefSyHook(boil.AfterSelectHook, spatialRefSyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	spatialRefSyAfterSelectHooks = []SpatialRefSyHook{}

	AddSpatialRefSyHook(boil.BeforeUpdateHook, spatialRefSyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	spatialRefSyBeforeUpdateHooks = []SpatialRefSyHook{}

	AddSpatialRefSyHook(boil.AfterUpdateHook, spatialRefSyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	spatialRefSyAfterUpdateHooks = []SpatialRefSyHook{}

	AddSpatialRefSyHook(boil.BeforeDeleteHook, spatialRefSyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	spatialRefSyBeforeDeleteHooks = []SpatialRefSyHook{}

	AddSpatialRefSyHook(boil.AfterDeleteHook, spatialRefSyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	spatialRefSyAfterDeleteHooks = []SpatialRefSyHook{}

	AddSpatialRefSyHook(boil.BeforeUpsertHook, spatialRefSyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	spatialRefSyBeforeUpsertHooks = []SpatialRefSyHook{}

	AddSpatialRefSyHook(boil.AfterUpsertHook, spatialRefSyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	spatialRefSyAfterUpsertHooks = []SpatialRefSyHook{}
}

func testSpatialRefSysInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpatialRefSy{}
	if err = randomize.Struct(seed, o, spatialRefSyDBTypes, true, spatialRefSyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SpatialRefSys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSpatialRefSysInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpatialRefSy{}
	if err = randomize.Struct(seed, o, spatialRefSyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(spatialRefSyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SpatialRefSys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSpatialRefSysReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpatialRefSy{}
	if err = randomize.Struct(seed, o, spatialRefSyDBTypes, true, spatialRefSyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSpatialRefSysReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpatialRefSy{}
	if err = randomize.Struct(seed, o, spatialRefSyDBTypes, true, spatialRefSyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SpatialRefSySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSpatialRefSysSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpatialRefSy{}
	if err = randomize.Struct(seed, o, spatialRefSyDBTypes, true, spatialRefSyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SpatialRefSys().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	spatialRefSyDBTypes = map[string]string{`Srid`: `integer`, `AuthName`: `character varying`, `AuthSrid`: `integer`, `Srtext`: `character varying`, `Proj4text`: `character varying`}
	_                   = bytes.MinRead
)

func testSpatialRefSysUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(spatialRefSyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(spatialRefSyAllColumns) == len(spatialRefSyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SpatialRefSy{}
	if err = randomize.Struct(seed, o, spatialRefSyDBTypes, true, spatialRefSyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SpatialRefSys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, spatialRefSyDBTypes, true, spatialRefSyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSpatialRefSysSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(spatialRefSyAllColumns) == len(spatialRefSyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SpatialRefSy{}
	if err = randomize.Struct(seed, o, spatialRefSyDBTypes, true, spatialRefSyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SpatialRefSys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, spatialRefSyDBTypes, true, spatialRefSyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(spatialRefSyAllColumns, spatialRefSyPrimaryKeyColumns) {
		fields = spatialRefSyAllColumns
	} else {
		fields = strmangle.SetComplement(
			spatialRefSyAllColumns,
			spatialRefSyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SpatialRefSySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSpatialRefSysUpsert(t *testing.T) {
	t.Parallel()

	if len(spatialRefSyAllColumns) == len(spatialRefSyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SpatialRefSy{}
	if err = randomize.Struct(seed, &o, spatialRefSyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SpatialRefSy: %s", err)
	}

	count, err := SpatialRefSys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, spatialRefSyDBTypes, false, spatialRefSyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SpatialRefSy struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SpatialRefSy: %s", err)
	}

	count, err = SpatialRefSys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
