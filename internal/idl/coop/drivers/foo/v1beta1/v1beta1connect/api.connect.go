// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: coop/drivers/foo/v1beta1/api.proto

package v1beta1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1beta1 "github.com/kevinmichaelchen/api-go-template/internal/idl/coop/drivers/foo/v1beta1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// FooServiceName is the fully-qualified name of the FooService service.
	FooServiceName = "coop.drivers.foo.v1beta1.FooService"
)

// FooServiceClient is a client for the coop.drivers.foo.v1beta1.FooService service.
type FooServiceClient interface {
	CreateFoo(context.Context, *connect_go.Request[v1beta1.CreateFooRequest]) (*connect_go.Response[v1beta1.CreateFooResponse], error)
	GetFoo(context.Context, *connect_go.Request[v1beta1.GetFooRequest]) (*connect_go.Response[v1beta1.GetFooResponse], error)
}

// NewFooServiceClient constructs a client for the coop.drivers.foo.v1beta1.FooService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFooServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FooServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fooServiceClient{
		createFoo: connect_go.NewClient[v1beta1.CreateFooRequest, v1beta1.CreateFooResponse](
			httpClient,
			baseURL+"/coop.drivers.foo.v1beta1.FooService/CreateFoo",
			opts...,
		),
		getFoo: connect_go.NewClient[v1beta1.GetFooRequest, v1beta1.GetFooResponse](
			httpClient,
			baseURL+"/coop.drivers.foo.v1beta1.FooService/GetFoo",
			opts...,
		),
	}
}

// fooServiceClient implements FooServiceClient.
type fooServiceClient struct {
	createFoo *connect_go.Client[v1beta1.CreateFooRequest, v1beta1.CreateFooResponse]
	getFoo    *connect_go.Client[v1beta1.GetFooRequest, v1beta1.GetFooResponse]
}

// CreateFoo calls coop.drivers.foo.v1beta1.FooService.CreateFoo.
func (c *fooServiceClient) CreateFoo(ctx context.Context, req *connect_go.Request[v1beta1.CreateFooRequest]) (*connect_go.Response[v1beta1.CreateFooResponse], error) {
	return c.createFoo.CallUnary(ctx, req)
}

// GetFoo calls coop.drivers.foo.v1beta1.FooService.GetFoo.
func (c *fooServiceClient) GetFoo(ctx context.Context, req *connect_go.Request[v1beta1.GetFooRequest]) (*connect_go.Response[v1beta1.GetFooResponse], error) {
	return c.getFoo.CallUnary(ctx, req)
}

// FooServiceHandler is an implementation of the coop.drivers.foo.v1beta1.FooService service.
type FooServiceHandler interface {
	CreateFoo(context.Context, *connect_go.Request[v1beta1.CreateFooRequest]) (*connect_go.Response[v1beta1.CreateFooResponse], error)
	GetFoo(context.Context, *connect_go.Request[v1beta1.GetFooRequest]) (*connect_go.Response[v1beta1.GetFooResponse], error)
}

// NewFooServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFooServiceHandler(svc FooServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/coop.drivers.foo.v1beta1.FooService/CreateFoo", connect_go.NewUnaryHandler(
		"/coop.drivers.foo.v1beta1.FooService/CreateFoo",
		svc.CreateFoo,
		opts...,
	))
	mux.Handle("/coop.drivers.foo.v1beta1.FooService/GetFoo", connect_go.NewUnaryHandler(
		"/coop.drivers.foo.v1beta1.FooService/GetFoo",
		svc.GetFoo,
		opts...,
	))
	return "/coop.drivers.foo.v1beta1.FooService/", mux
}

// UnimplementedFooServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFooServiceHandler struct{}

func (UnimplementedFooServiceHandler) CreateFoo(context.Context, *connect_go.Request[v1beta1.CreateFooRequest]) (*connect_go.Response[v1beta1.CreateFooResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("coop.drivers.foo.v1beta1.FooService.CreateFoo is not implemented"))
}

func (UnimplementedFooServiceHandler) GetFoo(context.Context, *connect_go.Request[v1beta1.GetFooRequest]) (*connect_go.Response[v1beta1.GetFooResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("coop.drivers.foo.v1beta1.FooService.GetFoo is not implemented"))
}
